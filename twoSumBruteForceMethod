// not an optimal solution, should use hash map

import java.util.*;
class Solution {
    

    
 public static int findIndex(int arr[], int t)
    {
 
        // if array is Null
        if (arr == null) {
            return -1;
        }
 
        // find length of array
        int len = arr.length;
        int i = 0;
 
        // traverse in the array
        while (i < len) {
 
            // if the i-th element is t
            // then return the index
            if (arr[i] == t) {
                return i;
            }
            else {
                i = i + 1;
            }
        }
        return -1;
    }
	
	
    public int[] twoSum(int[] nums, int target) {
        int n = 0;
        int nNext = 0;
        int a = 0;
        int b = 0;
        int[] result = {0, 0};
        for(int i = 0; i < nums.length; i++){
            n = nums[i];
            nNext = nums[i+1];
            
            if(nums[i] + nums[i+1] == target){
            		a = findIndex(nums, nums[i]);
            		b = findIndex(nums, nums[i+1]);
                    result[0] = a;
                    result[0] = b;
                    return result;
            }
            
            for(int j = 0; j <= nums.length; j++){
                if(i + j == target){
                	a = findIndex(nums, nums[i]);
            		b = findIndex(nums, nums[j]);
                    result[0] = a;
                    result[0] = b;
                    return result;
                }
                else{
                    j++;
                }
            }
            i++;
        }
        return result;
    }
}
